# Tony Karalekas
# Spring 2015
# CS 151 Project 7
#
# lsystem.py version 1
#---------------------------------------------
#
# Manages L-systems stored as a 2-element list
# - first element of the list is the base string
# - second element of the list is a list of rules
# 	- each rule is a 2-element list
# 	- the first element is the symbol to be replaced
# 	- the second element is the replacement string
#
#
# Example: [ 'A', [['A', 'AB]]
#  Base string: A
#  Rule: A -> AB
#
#==========================================================================
# imports
import sys


# LAB 7 WORK
# useful functions

def init():
	'''Returns an empty L-system structure (list)'''
	return ['',[]]
	
def setBase(lsys, base):
	'''Sets the base string of the lsys structure to base'''
	lsys[0] = base

def addRule(lsys, newrule):
	lsys[1].append(newrule) 
	
def getBase(lsys):
	'''Returns the base string of the lsystem'''
	return lsys[0]

def getRule(lsys, index):
	'''Returns the rule at position index'''
	return lsys[1][index]
	

def createLsystemFromFile( filename ):
	""" Create an L-system list by reading in the specified file """
	fp = open(filename, "r")
	lines = fp.readlines()
	fp.close()
	lsys = init()
	for line in lines:
		words = line.split()
		if words[0] == 'base':
			setBase(lsys, words[1])
		elif words[0] == 'rule':
			addRule(lsys, words[1:])
	return lsys
  

def buildString( lsys, iter ):
	""" Return a string generated by applying the L-system rules
		for iter iterations """
	nstring = getBase(lsys)
	rule = getRule(lsys, 0)
	symbol = rule[0]
	replacement = rule[1]
	for i in range(iter):
		nstring = nstring.replace( symbol, replacement )
	return nstring 
		
    # assign to a local variable (e.g. nstring) the result of getBase(lsys) 
    # assign to a local variable (e.g. rule) the result of getRule(lsys, 0)
    # assign to a local variable (e.g. symbol) the first element of of the rule
    # assign to a local variable (e.g. replacement) the second element of of the rule
    # loop iter times
        # assign to nstring, the result of nstring.replace( symbol, replacement )
    # return nstring
	
	


#---------------------------------------------------
# test code 
def main(argv):

	#my_lsys = init()
	#setBase( my_lsys, 'A')
	#addRule( my_lsys, ['A','AB'])
	#print my_lsys
	#print 'the base is', getBase(my_lsys)
	#print 'the first rule is', getRule(my_lsys, 0)
	
	if len(argv) < 3:
		print "Usage : python lsystem.py <in_filename> <num_iterations>"
		exit()

	lsys_filename = argv[1]
	lsys = createLsystemFromFile( lsys_filename )
	print lsys
										 
	num_iter = int( argv[2] )
	s = buildString( lsys, num_iter )
	print s

if __name__ == '__main__':
	main(sys.argv)